// All the types of syntax that are available in the abstract syntax tree.
// This is used to determine what type of syntax a node is. This includes jsx syntax.

export enum JsSyntaxEnum {
  JsxElement = "JsxElement",
  JsxOpeningElement = "JsxOpeningElement",
  JsxClosingElement = "JsxClosingElement",
  JsxText = "JsxText",
  JsxExpressionContainer = "JsxExpressionContainer",
  JsxAttribute = "JsxAttribute",
  JsxSpreadAttribute = "JsxSpreadAttribute",
  JsxIdentifier = "JsxIdentifier",
  JsxMemberExpression = "JsxMemberExpression",
  JsxNamespacedName = "JsxNamespacedName",
  JsxSpreadChild = "JsxSpreadChild",
  JsxEmptyExpression = "JsxEmptyExpression",
  JSXFragment = "JSXFragment",
  JSXOpeningFragment = "JSXOpeningFragment",
  JSXClosingFragment = "JSXClosingFragment",
}

export enum JsSyntaxEnum {
  VariableDeclaration = "VariableDeclaration",
  VariableDeclarator = "VariableDeclarator",
  Identifier = "Identifier",
  Literal = "Literal",
  ExpressionStatement = "ExpressionStatement",
  CallExpression = "CallExpression",
  MemberExpression = "MemberExpression",
  AssignmentExpression = "AssignmentExpression",
  BinaryExpression = "BinaryExpression",
  LogicalExpression = "LogicalExpression",
  UnaryExpression = "UnaryExpression",
  UpdateExpression = "UpdateExpression",
  ArrayExpression = "ArrayExpression",
  ObjectExpression = "ObjectExpression",
  Property = "Property",
  FunctionDeclaration = "FunctionDeclaration",
  FunctionExpression = "FunctionExpression",
  ArrowFunctionExpression = "ArrowFunctionExpression",
  IfStatement = "IfStatement",
  SwitchStatement = "SwitchStatement",
  SwitchCase = "SwitchCase",
  BreakStatement = "BreakStatement",
  ContinueStatement = "ContinueStatement",
  ReturnStatement = "ReturnStatement",
  ThrowStatement = "ThrowStatement",
  TryStatement = "TryStatement",
  CatchClause = "CatchClause",
  WhileStatement = "WhileStatement",
  DoWhileStatement = "DoWhileStatement",
  ForStatement = "ForStatement",
  ForInStatement = "ForInStatement",
  ForOfStatement = "ForOfStatement",
  BlockStatement = "BlockStatement",
  Program = "Program",
  ThisExpression = "ThisExpression",
  SequenceExpression = "SequenceExpression",
  ConditionalExpression = "ConditionalExpression",
  NewExpression = "NewExpression",
  ImportDeclaration = "ImportDeclaration",
  ImportSpecifier = "ImportSpecifier",
  ImportDefaultSpecifier = "ImportDefaultSpecifier",
  ImportNamespaceSpecifier = "ImportNamespaceSpecifier",
  ExportNamedDeclaration = "ExportNamedDeclaration",
  ExportSpecifier = "ExportSpecifier",
  ExportDefaultDeclaration = "ExportDefaultDeclaration",
  ExportAllDeclaration = "ExportAllDeclaration",
  ClassDeclaration = "ClassDeclaration",
  ClassExpression = "ClassExpression",
  ClassBody = "ClassBody",
  MethodDefinition = "MethodDefinition",
  Super = "Super",
  TemplateLiteral = "TemplateLiteral",
  TaggedTemplateExpression = "TaggedTemplateExpression",
  TemplateElement = "TemplateElement",
  AwaitExpression = "AwaitExpression",
  YieldExpression = "YieldExpression",
  EmptyStatement = "EmptyStatement",
  DebuggerStatement = "DebuggerStatement",
  LabeledStatement = "LabeledStatement",
  MetaProperty = "MetaProperty",
  RestElement = "RestElement",
  SpreadElement = "SpreadElement",
  AssignmentPattern = "AssignmentPattern",
  ClassMethod = "ClassMethod",
  ClassProperty = "ClassProperty",
  ObjectPattern = "ObjectPattern",
  ArrayPattern = "ArrayPattern",
  SwitchDefault = "SwitchDefault",
  VariableDeclarationKind = "VariableDeclarationKind",
  VariableDeclarationKindValue = "VariableDeclarationKindValue",
  VariableDeclarationKindType = "VariableDeclarationKindType",
}
